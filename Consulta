package modelo;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Consulta implements Exibivel {
    private static int proximoId = 1;
    private int id;
    private Paciente paciente;
    private Medico medico;
    private LocalDateTime dataHora;
    private String observacoes;
    private boolean cancelada;

    public Consulta(Paciente paciente, Medico medico, LocalDateTime dataHora, String observacoes) throws CampoObrigatorioException {
        setId(proximoId++);
        setPaciente(paciente);
        setMedico(medico);
        setDataHora(dataHora);
        setObservacoes(observacoes);
        this.cancelada = false;
    }

    // Getters e Setters
    public int getId() {
        return id;
    }

    private void setId(int id) {
        this.id = id;
    }

    public Paciente getPaciente() {
        return paciente;
    }

    public void setPaciente(Paciente paciente) throws CampoObrigatorioException {
        if (paciente == null) {
            throw new CampoObrigatorioException("Paciente é obrigatório");
        }
        this.paciente = paciente;
    }

    public Medico getMedico() {
        return medico;
    }

    public void setMedico(Medico medico) throws CampoObrigatorioException {
        if (medico == null) {
            throw new CampoObrigatorioException("Médico é obrigatório");
        }
        this.medico = medico;
    }

    public LocalDateTime getDataHora() {
        return dataHora;
    }

    public void setDataHora(LocalDateTime dataHora) throws CampoObrigatorioException {
        if (dataHora == null) {
            throw new CampoObrigatorioException("Data e hora são obrigatórias");
        }
        if (dataHora.isBefore(LocalDateTime.now())) {
            throw new IllegalArgumentException("Data e hora não podem ser no passado");
        }
        this.dataHora = dataHora;
    }

    public String getObservacoes() {
        return observacoes;
    }

    public void setObservacoes(String observacoes) {
        this.observacoes = observacoes != null ? observacoes : "";
    }

    public boolean isCancelada() {
        return cancelada;
    }

    public void cancelar() {
        this.cancelada = true;
    }

    @Override
    public void exibir() {
        System.out.println("Consulta ID: " + id);
        System.out.println("Paciente: " + paciente.getNome());
        System.out.println("Médico: " + medico.getNome() + " (" + medico.getEspecialidade() + ")");
        System.out.println("Data/Hora: " + dataHora.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")));
        System.out.println("Observações: " + observacoes);
        System.out.println("Status: " + (cancelada ? "CANCELADA" : "AGENDADA"));
    }
}
